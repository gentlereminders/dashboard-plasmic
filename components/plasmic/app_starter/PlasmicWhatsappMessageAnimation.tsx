/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hZLAfRDEeUGg5dcwpxosDh
// Component: uZWamZGnCefI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RivePlayer } from "@plasmicpkgs/rive";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hZLAfRDEeUGg5dcwpxosDh/projectcss
import sty from "./PlasmicWhatsappMessageAnimation.module.css"; // plasmic-import: uZWamZGnCefI/css

createPlasmicElementProxy;

export type PlasmicWhatsappMessageAnimation__VariantMembers = {};
export type PlasmicWhatsappMessageAnimation__VariantsArgs = {};
type VariantPropType = keyof PlasmicWhatsappMessageAnimation__VariantsArgs;
export const PlasmicWhatsappMessageAnimation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWhatsappMessageAnimation__ArgsType = {};
type ArgPropType = keyof PlasmicWhatsappMessageAnimation__ArgsType;
export const PlasmicWhatsappMessageAnimation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicWhatsappMessageAnimation__OverridesType = {
  rive?: Flex__<typeof RivePlayer>;
};

export interface DefaultWhatsappMessageAnimationProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWhatsappMessageAnimation__RenderFunc(props: {
  variants: PlasmicWhatsappMessageAnimation__VariantsArgs;
  args: PlasmicWhatsappMessageAnimation__ArgsType;
  overrides: PlasmicWhatsappMessageAnimation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <RivePlayer
      data-plasmic-name={"rive"}
      data-plasmic-override={overrides.rive}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      animations={["Timeline 1"]}
      autoplay={true}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        sty.rive
      )}
      layout={(() => {
        const __composite = { fit: null, alignment: null };
        __composite["fit"] = "contain";
        __composite["alignment"] = "topCenter";
        return __composite;
      })()}
      onStateChange={async event => {
        const $steps = {};
      }}
      ref={ref => {
        $refs["rive"] = ref;
      }}
      src={
        "https://coxuwxtmugbwsufucgvk.supabase.co/storage/v1/object/public/files//whatsapp_screen%20(1).riv"
      }
      stateMachines={["State Machine 1"]}
      studioAutoplay={false}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rive: ["rive"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rive: typeof RivePlayer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhatsappMessageAnimation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWhatsappMessageAnimation__VariantsArgs;
    args?: PlasmicWhatsappMessageAnimation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWhatsappMessageAnimation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWhatsappMessageAnimation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWhatsappMessageAnimation__ArgProps,
          internalVariantPropNames:
            PlasmicWhatsappMessageAnimation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWhatsappMessageAnimation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rive") {
    func.displayName = "PlasmicWhatsappMessageAnimation";
  } else {
    func.displayName = `PlasmicWhatsappMessageAnimation.${nodeName}`;
  }
  return func;
}

export const PlasmicWhatsappMessageAnimation = Object.assign(
  // Top-level PlasmicWhatsappMessageAnimation renders the root element
  makeNodeComponent("rive"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicWhatsappMessageAnimation
    internalVariantProps: PlasmicWhatsappMessageAnimation__VariantProps,
    internalArgProps: PlasmicWhatsappMessageAnimation__ArgProps
  }
);

export default PlasmicWhatsappMessageAnimation;
/* prettier-ignore-end */
