/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hZLAfRDEeUGg5dcwpxosDh
// Component: 98gt3ku9m5cp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import Divider from "../../Divider"; // plasmic-import: 0GkKdvbMkK8H/component
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantspnupK8DtgUjr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pnupK8DTGUjr/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hZLAfRDEeUGg5dcwpxosDh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 98gt3ku9m5cp/css

import ListIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__List"; // plasmic-import: 2cB-B4xYzK7K/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: UgCWFM-tLaF-/icon
import ChartDonutFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__ChartDonutFilled"; // plasmic-import: pd8MwTDG-SUq/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  login?: Flex__<typeof AntdButton>;
  home?: Flex__<typeof AntdButton>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  amount?: Flex__<"div">;
  item?: Flex__<"div">;
  category?: Flex__<"div">;
  amount4?: Flex__<"div">;
  amount5?: Flex__<"div">;
  amount2?: Flex__<"div">;
  item2?: Flex__<"div">;
  category2?: Flex__<"div">;
  amount6?: Flex__<"div">;
  amount7?: Flex__<"div">;
  tabUnderline?: Flex__<typeof TabUnderline>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    listOfExpenses: usePlasmicDataOp(() => {
      return {
        sourceId: "3U9nDa6k9LxPAnd5j1JMum",
        opId: "3435e595-7a53-43c6-83bd-93e445fa9e99",
        userArgs: {},
        cacheKey: `plasmic.$.3435e595-7a53-43c6-83bd-93e445fa9e99.$.`,
        invalidatedKeys: null,
        roleId: "9003373d-52e0-43d7-b60f-adf0e01af9e6"
      };
    }),
    listOfExpenseSql: usePlasmicDataOp(() => {
      return {
        sourceId: "3U9nDa6k9LxPAnd5j1JMum",
        opId: "68a33780-8ce3-4a96-8c96-dd42dbb843b4",
        userArgs: {},
        cacheKey: `plasmic.$.68a33780-8ce3-4a96-8c96-dd42dbb843b4.$.`,
        invalidatedKeys: null,
        roleId: "9003373d-52e0-43d7-b60f-adf0e01af9e6"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspnupK8DtgUjr()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__xWz1Q)}>
            <div className={classNames(projectcss.all, sty.columns__fwGv5)}>
              <div className={classNames(projectcss.all, sty.column__c9Ul9)}>
                <AntdButton
                  data-plasmic-name={"login"}
                  data-plasmic-override={overrides.login}
                  className={classNames("__wab_instance", sty.login)}
                  href={`/login`}
                  onClick={async () => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oQ8Yj
                    )}
                  >
                    {"Login"}
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.column__plqN)}>
                <AntdButton
                  data-plasmic-name={"home"}
                  data-plasmic-override={overrides.home}
                  className={classNames("__wab_instance", sty.home)}
                  href={`/dashboard`}
                  onClick={async () => {
                    const $steps = {};
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jeKtL
                    )}
                  >
                    {"Home"}
                  </div>
                </AntdButton>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__pe0ZG)}>
            <TabsContainer
              data-plasmic-name={"tabsContainer"}
              data-plasmic-override={overrides.tabsContainer}
              initialKey={"tab1"}
              previewAll={false}
              previewKey={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "tab2"
                  : "tab2"
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g4EnV)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Y8Vf
                      )}
                    >
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__l4LQr
                        )}
                        tabKey={"tab1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__w6Vgp
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.listOfExpenses.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ca7Gn
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.columns__xC5RO
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__pv7Gx
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fhghs
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"amount"}
                                        data-plasmic-override={overrides.amount}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $queries.listOfExpenseSql
                                                .data[currentIndex].amount;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "500";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider__yAxgJ
                                        )}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns__jcZef
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__lnaU2
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"item"}
                                            data-plasmic-override={
                                              overrides.item
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.item
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return $queries
                                                    .listOfExpenseSql.data[
                                                    currentIndex
                                                  ].note;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "item";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__tcAxs
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__pyB7I
                                            )}
                                          >
                                            {(
                                              hasVariant(
                                                globalVariants,
                                                "screen",
                                                "mobileOnly"
                                              )
                                                ? true
                                                : false
                                            ) ? (
                                              <Divider
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.divider__xdi8J
                                                )}
                                              />
                                            ) : null}
                                            <div
                                              data-plasmic-name={"category"}
                                              data-plasmic-override={
                                                overrides.category
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.category
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $queries.listOfExpenseSql
                                                        .data[currentIndex]
                                                        .category_name +
                                                      " " +
                                                      $queries.listOfExpenseSql
                                                        .data[currentIndex]
                                                        .category_emoji
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "category";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </Stack__>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__vSmj9
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__tzjV
                                      )}
                                    >
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider__cvVz7
                                        )}
                                      />

                                      <div
                                        data-plasmic-name={"amount4"}
                                        data-plasmic-override={
                                          overrides.amount4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount4
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return new Date(
                                                $queries.listOfExpenseSql.data[
                                                  currentIndex
                                                ].expense_date
                                              ).toLocaleString();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "date";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider__rlRgX
                                        )}
                                      />

                                      <div
                                        data-plasmic-name={"amount5"}
                                        data-plasmic-override={
                                          overrides.amount5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount5
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return new Date(
                                                $queries.listOfExpenseSql.data[
                                                  currentIndex
                                                ].created_at
                                              ).toLocaleString("en-GB");
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "date_created";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  </div>
                                </div>
                              </Stack__>
                            );
                          })}
                        </div>
                      </TabContent>
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__xBFkm
                        )}
                        tabKey={"tab2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gS8Uc
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.listOfExpenses.data.filter(
                                  expense =>
                                    new Date(expense.created_at) >
                                    new Date(Date.now() - 24 * 60 * 60 * 1000)
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sDlYj
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.columns__hvApr
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column___4H38W
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__j1N2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"amount2"}
                                        data-plasmic-override={
                                          overrides.amount2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount2
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $queries.listOfExpenseSql
                                                .data[currentIndex].amount;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "500";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider__smO95
                                        )}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.columns___2MPqb
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column___3Na2Q
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"item2"}
                                            data-plasmic-override={
                                              overrides.item2
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.item2
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return $queries
                                                    .listOfExpenseSql.data[
                                                    currentIndex
                                                  ].note;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "item";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__xa5Yi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__yhvR
                                            )}
                                          >
                                            {(
                                              hasVariant(
                                                globalVariants,
                                                "screen",
                                                "mobileOnly"
                                              )
                                                ? true
                                                : false
                                            ) ? (
                                              <Divider
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.divider__uenOr
                                                )}
                                              />
                                            ) : null}
                                            <div
                                              data-plasmic-name={"category2"}
                                              data-plasmic-override={
                                                overrides.category2
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.category2
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $queries.listOfExpenseSql
                                                        .data[currentIndex]
                                                        .category_name +
                                                      " " +
                                                      $queries.listOfExpenseSql
                                                        .data[currentIndex]
                                                        .category_emoji
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "category";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </Stack__>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column___9Muv
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___8NNu
                                      )}
                                    >
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider__zifjF
                                        )}
                                      />

                                      <div
                                        data-plasmic-name={"amount6"}
                                        data-plasmic-override={
                                          overrides.amount6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount6
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return new Date(
                                                $queries.listOfExpenseSql.data[
                                                  currentIndex
                                                ].expense_date
                                              ).toLocaleString();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "date";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <Divider
                                        className={classNames(
                                          "__wab_instance",
                                          sty.divider___8JkG
                                        )}
                                      />

                                      <div
                                        data-plasmic-name={"amount7"}
                                        data-plasmic-override={
                                          overrides.amount7
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.amount7
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return new Date(
                                                $queries.listOfExpenseSql.data[
                                                  currentIndex
                                                ].created_at
                                              ).toLocaleString("en-GB");
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "date_created";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  </div>
                                </div>
                              </Stack__>
                            );
                          })}
                        </div>
                      </TabContent>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wEt67)}
                    >
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__dStgZ
                        )}
                        tabKey={"tab1"}
                      >
                        <Button
                          showStartIcon={true}
                          startIcon={
                            <ListIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hPxNn
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qu9Sz
                            )}
                          >
                            {"All Expenses"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__d2PaN
                        )}
                        tabKey={"tab2"}
                      >
                        <Button
                          showStartIcon={true}
                          startIcon={
                            <Icon3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4REx4
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q0WMb
                            )}
                          >
                            {"Recent"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton___2Qz6W
                        )}
                        tabKey={"tab3"}
                      >
                        <Button
                          showStartIcon={true}
                          startIcon={
                            <ChartDonutFilledIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__r6AEe
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nGnG
                            )}
                          >
                            {"Reports"}
                          </div>
                        </Button>
                      </TabButton>
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </Stack__>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "login",
    "home",
    "tabsContainer",
    "amount",
    "item",
    "category",
    "amount4",
    "amount5",
    "amount2",
    "item2",
    "category2",
    "amount6",
    "amount7",
    "tabUnderline"
  ],
  login: ["login"],
  home: ["home"],
  tabsContainer: [
    "tabsContainer",
    "amount",
    "item",
    "category",
    "amount4",
    "amount5",
    "amount2",
    "item2",
    "category2",
    "amount6",
    "amount7",
    "tabUnderline"
  ],
  amount: ["amount"],
  item: ["item"],
  category: ["category"],
  amount4: ["amount4"],
  amount5: ["amount5"],
  amount2: ["amount2"],
  item2: ["item2"],
  category2: ["category2"],
  amount6: ["amount6"],
  amount7: ["amount7"],
  tabUnderline: ["tabUnderline"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  login: typeof AntdButton;
  home: typeof AntdButton;
  tabsContainer: typeof TabsContainer;
  amount: "div";
  item: "div";
  category: "div";
  amount4: "div";
  amount5: "div";
  amount2: "div";
  item2: "div";
  category2: "div";
  amount6: "div";
  amount7: "div";
  tabUnderline: typeof TabUnderline;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"9003373d-52e0-43d7-b60f-adf0e01af9e6"}
      appId={"hZLAfRDEeUGg5dcwpxosDh"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hZLAfRDEeUGg5dcwpxosDh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    home: makeNodeComponent("home"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    amount: makeNodeComponent("amount"),
    item: makeNodeComponent("item"),
    category: makeNodeComponent("category"),
    amount4: makeNodeComponent("amount4"),
    amount5: makeNodeComponent("amount5"),
    amount2: makeNodeComponent("amount2"),
    item2: makeNodeComponent("item2"),
    category2: makeNodeComponent("category2"),
    amount6: makeNodeComponent("amount6"),
    amount7: makeNodeComponent("amount7"),
    tabUnderline: makeNodeComponent("tabUnderline"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
