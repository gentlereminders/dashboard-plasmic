/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hZLAfRDEeUGg5dcwpxosDh
// Component: AYqOW3pjMQn-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { RivePlayer } from "@plasmicpkgs/rive";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button2 from "../../Button2"; // plasmic-import: WituWV29XfRV/component
import Footer from "../../Footer"; // plasmic-import: 7gFpCRLzeVeL/component

import { useScreenVariants as useScreenVariantspnupK8DtgUjr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pnupK8DTGUjr/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hZLAfRDEeUGg5dcwpxosDh/projectcss
import sty from "./PlasmicLandingPag.module.css"; // plasmic-import: AYqOW3pjMQn-/css

createPlasmicElementProxy;

export type PlasmicLandingPag__VariantMembers = {};
export type PlasmicLandingPag__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingPag__VariantsArgs;
export const PlasmicLandingPag__VariantProps = new Array<VariantPropType>();

export type PlasmicLandingPag__ArgsType = {};
type ArgPropType = keyof PlasmicLandingPag__ArgsType;
export const PlasmicLandingPag__ArgProps = new Array<ArgPropType>();

export type PlasmicLandingPag__OverridesType = {
  root?: Flex__<"div">;
  mockup?: Flex__<"section">;
  rive?: Flex__<typeof RivePlayer>;
  section?: Flex__<"section">;
  header?: Flex__<"div">;
  haedParagraph?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame12?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  embedHtml?: Flex__<typeof Embed>;
  button2?: Flex__<typeof Button2>;
  features?: Flex__<"div">;
  features2?: Flex__<"div">;
  _?: Flex__<"div">;
  _2?: Flex__<"div">;
  features5?: Flex__<"div">;
  _7?: Flex__<"div">;
  _8?: Flex__<"div">;
  speakNaturallyTomorrowAt9In10Mins3?: Flex__<"div">;
  features3?: Flex__<"div">;
  _3?: Flex__<"div">;
  _4?: Flex__<"div">;
  speakNaturallyTomorrowAt9In10Mins?: Flex__<"div">;
  features4?: Flex__<"div">;
  _5?: Flex__<"div">;
  _6?: Flex__<"div">;
  speakNaturallyTomorrowAt9In10Mins2?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultLandingPagProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLandingPag__RenderFunc(props: {
  variants: PlasmicLandingPag__VariantsArgs;
  args: PlasmicLandingPag__ArgsType;
  overrides: PlasmicLandingPag__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sent",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspnupK8DtgUjr()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLandingPag.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLandingPag.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLandingPag.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
          plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__lg4B)}>
          <section
            data-plasmic-name={"mockup"}
            data-plasmic-override={overrides.mockup}
            className={classNames(projectcss.all, sty.mockup)}
          >
            <RivePlayer
              data-plasmic-name={"rive"}
              data-plasmic-override={overrides.rive}
              autoplay={true}
              className={classNames("__wab_instance", sty.rive)}
              layout={(() => {
                const __composite = { alignment: null };
                __composite["alignment"] = "topCenter";
                return __composite;
              })()}
              ref={ref => {
                $refs["rive"] = ref;
              }}
              src={
                "https://coxuwxtmugbwsufucgvk.supabase.co/storage/v1/object/public/files//whatsapp_screen%20(2).riv"
              }
              stateMachines={["State Machine 1"]}
              studioAutoplay={false}
            />
          </section>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jzlWs
                )}
              >
                {"No more opening apps or tapping through menus."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jiRlh
                )}
              >
                {"Just text your reminders."}
              </div>
            </Stack__>
          </section>
          <Stack__
            as={"div"}
            data-plasmic-name={"haedParagraph"}
            data-plasmic-override={overrides.haedParagraph}
            hasGap={true}
            className={classNames(projectcss.all, sty.haedParagraph)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame12)}
              >
                <AntdModal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens,
                    plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
                    plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens
                  )}
                  hideFooter={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                  modalContentClassName={classNames({
                    [sty["pcls_Bkr8qXHQe2d1"]]: true
                  })}
                  modalScopeClassName={sty["modal__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["modal", "open"])}
                  title={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Waitlist"
                      : "Modal title"
                  }
                  trigger={
                    <Button2
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                    />
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "95%"
                      : "90%"
                  }
                  wrapClassName={classNames({
                    [sty["pcls_v3VC5vb1p1hX"]]: true
                  })}
                >
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      '<div style="width:100%;height:500px;" data-fillout-id="x62z5BgAW8us" data-fillout-embed-type="standard" data-fillout-inherit-parameters data-fillout-dynamic-resize></div><script src="https://server.fillout.com/embed/v1/"></script>'
                    }
                  />
                </AntdModal>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__htyR9
                  )}
                >
                  {"Free for first 100 signups"}
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__fbY3A)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jnpFo
                  )}
                >
                  {"Your personal assistant"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uX66J
                  )}
                >
                  {"right inside Whatsapp"}
                </div>
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            hasGap={true}
            className={classNames(projectcss.all, sty.features)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"features2"}
              data-plasmic-override={overrides.features2}
              hasGap={true}
              className={classNames(projectcss.all, sty.features2)}
            >
              <div
                data-plasmic-name={"_"}
                data-plasmic-override={overrides._}
                className={classNames(projectcss.all, sty._)}
              >
                <div
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._2
                  )}
                >
                  {"\ud83d\udd14 "}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__evShK
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Speak naturally  "}
                  </span>
                  <React.Fragment>
                    {"\n \u201ctomorrow at 9\u201d / \u201cin 10 mins\u201d"}
                  </React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"features5"}
              data-plasmic-override={overrides.features5}
              hasGap={true}
              className={classNames(projectcss.all, sty.features5)}
            >
              <div
                data-plasmic-name={"_7"}
                data-plasmic-override={overrides._7}
                className={classNames(projectcss.all, sty._7)}
              >
                <div
                  data-plasmic-name={"_8"}
                  data-plasmic-override={overrides._8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._8
                  )}
                >
                  {"\ud83d\udd01"}
                </div>
              </div>
              <div
                data-plasmic-name={"speakNaturallyTomorrowAt9In10Mins3"}
                data-plasmic-override={
                  overrides.speakNaturallyTomorrowAt9In10Mins3
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.speakNaturallyTomorrowAt9In10Mins3
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Set Repeat Reminders"}
                  </span>
                  <React.Fragment>
                    {
                      '\n"Remind me to drink water every hour"\n"Remind me to fix my posture every hour"'
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"features3"}
              data-plasmic-override={overrides.features3}
              hasGap={true}
              className={classNames(projectcss.all, sty.features3)}
            >
              <div
                data-plasmic-name={"_3"}
                data-plasmic-override={overrides._3}
                className={classNames(projectcss.all, sty._3)}
              >
                <div
                  data-plasmic-name={"_4"}
                  data-plasmic-override={overrides._4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._4
                  )}
                >
                  {"\ud83d\udd52"}
                </div>
              </div>
              <div
                data-plasmic-name={"speakNaturallyTomorrowAt9In10Mins"}
                data-plasmic-override={
                  overrides.speakNaturallyTomorrowAt9In10Mins
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.speakNaturallyTomorrowAt9In10Mins
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Always on time"}
                  </span>
                  <React.Fragment>
                    {
                      "\nReminders fire exactly when you need them right inside your whatsapp"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"features4"}
              data-plasmic-override={overrides.features4}
              hasGap={true}
              className={classNames(projectcss.all, sty.features4)}
            >
              <div
                data-plasmic-name={"_5"}
                data-plasmic-override={overrides._5}
                className={classNames(projectcss.all, sty._5)}
              >
                <div
                  data-plasmic-name={"_6"}
                  data-plasmic-override={overrides._6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._6
                  )}
                >
                  {"\ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92"}
                </div>
              </div>
              <div
                data-plasmic-name={"speakNaturallyTomorrowAt9In10Mins2"}
                data-plasmic-override={
                  overrides.speakNaturallyTomorrowAt9In10Mins2
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.speakNaturallyTomorrowAt9In10Mins2
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"24hr Executive assistant."}
                  </span>
                  <React.Fragment>
                    {"\nWithout leaving your whatsapp."}
                  </React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mockup",
    "rive",
    "section",
    "header",
    "haedParagraph",
    "frame4",
    "frame12",
    "modal",
    "embedHtml",
    "button2",
    "features",
    "features2",
    "_",
    "_2",
    "features5",
    "_7",
    "_8",
    "speakNaturallyTomorrowAt9In10Mins3",
    "features3",
    "_3",
    "_4",
    "speakNaturallyTomorrowAt9In10Mins",
    "features4",
    "_5",
    "_6",
    "speakNaturallyTomorrowAt9In10Mins2",
    "footer"
  ],
  mockup: ["mockup", "rive"],
  rive: ["rive"],
  section: ["section", "header"],
  header: ["header"],
  haedParagraph: [
    "haedParagraph",
    "frame4",
    "frame12",
    "modal",
    "embedHtml",
    "button2"
  ],
  frame4: ["frame4", "frame12", "modal", "embedHtml", "button2"],
  frame12: ["frame12", "modal", "embedHtml", "button2"],
  modal: ["modal", "embedHtml", "button2"],
  embedHtml: ["embedHtml"],
  button2: ["button2"],
  features: [
    "features",
    "features2",
    "_",
    "_2",
    "features5",
    "_7",
    "_8",
    "speakNaturallyTomorrowAt9In10Mins3",
    "features3",
    "_3",
    "_4",
    "speakNaturallyTomorrowAt9In10Mins",
    "features4",
    "_5",
    "_6",
    "speakNaturallyTomorrowAt9In10Mins2"
  ],
  features2: ["features2", "_", "_2"],
  _: ["_", "_2"],
  _2: ["_2"],
  features5: ["features5", "_7", "_8", "speakNaturallyTomorrowAt9In10Mins3"],
  _7: ["_7", "_8"],
  _8: ["_8"],
  speakNaturallyTomorrowAt9In10Mins3: ["speakNaturallyTomorrowAt9In10Mins3"],
  features3: ["features3", "_3", "_4", "speakNaturallyTomorrowAt9In10Mins"],
  _3: ["_3", "_4"],
  _4: ["_4"],
  speakNaturallyTomorrowAt9In10Mins: ["speakNaturallyTomorrowAt9In10Mins"],
  features4: ["features4", "_5", "_6", "speakNaturallyTomorrowAt9In10Mins2"],
  _5: ["_5", "_6"],
  _6: ["_6"],
  speakNaturallyTomorrowAt9In10Mins2: ["speakNaturallyTomorrowAt9In10Mins2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mockup: "section";
  rive: typeof RivePlayer;
  section: "section";
  header: "div";
  haedParagraph: "div";
  frame4: "div";
  frame12: "div";
  modal: typeof AntdModal;
  embedHtml: typeof Embed;
  button2: typeof Button2;
  features: "div";
  features2: "div";
  _: "div";
  _2: "div";
  features5: "div";
  _7: "div";
  _8: "div";
  speakNaturallyTomorrowAt9In10Mins3: "div";
  features3: "div";
  _3: "div";
  _4: "div";
  speakNaturallyTomorrowAt9In10Mins: "div";
  features4: "div";
  _5: "div";
  _6: "div";
  speakNaturallyTomorrowAt9In10Mins2: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingPag__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingPag__VariantsArgs;
    args?: PlasmicLandingPag__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingPag__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingPag__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLandingPag__ArgProps,
          internalVariantPropNames: PlasmicLandingPag__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLandingPag__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingPag";
  } else {
    func.displayName = `PlasmicLandingPag.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hZLAfRDEeUGg5dcwpxosDh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLandingPag = Object.assign(
  // Top-level PlasmicLandingPag renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    mockup: makeNodeComponent("mockup"),
    rive: makeNodeComponent("rive"),
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    haedParagraph: makeNodeComponent("haedParagraph"),
    frame4: makeNodeComponent("frame4"),
    frame12: makeNodeComponent("frame12"),
    modal: makeNodeComponent("modal"),
    embedHtml: makeNodeComponent("embedHtml"),
    button2: makeNodeComponent("button2"),
    features: makeNodeComponent("features"),
    features2: makeNodeComponent("features2"),
    _: makeNodeComponent("_"),
    _2: makeNodeComponent("_2"),
    features5: makeNodeComponent("features5"),
    _7: makeNodeComponent("_7"),
    _8: makeNodeComponent("_8"),
    speakNaturallyTomorrowAt9In10Mins3: makeNodeComponent(
      "speakNaturallyTomorrowAt9In10Mins3"
    ),
    features3: makeNodeComponent("features3"),
    _3: makeNodeComponent("_3"),
    _4: makeNodeComponent("_4"),
    speakNaturallyTomorrowAt9In10Mins: makeNodeComponent(
      "speakNaturallyTomorrowAt9In10Mins"
    ),
    features4: makeNodeComponent("features4"),
    _5: makeNodeComponent("_5"),
    _6: makeNodeComponent("_6"),
    speakNaturallyTomorrowAt9In10Mins2: makeNodeComponent(
      "speakNaturallyTomorrowAt9In10Mins2"
    ),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingPag
    internalVariantProps: PlasmicLandingPag__VariantProps,
    internalArgProps: PlasmicLandingPag__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "One Ping",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLandingPag;
/* prettier-ignore-end */
