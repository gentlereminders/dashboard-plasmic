/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hZLAfRDEeUGg5dcwpxosDh
// Component: GycboIxMFkwb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Footer from "../../Footer"; // plasmic-import: 7gFpCRLzeVeL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hZLAfRDEeUGg5dcwpxosDh/projectcss
import sty from "./PlasmicPrivacyPolicies.module.css"; // plasmic-import: GycboIxMFkwb/css

createPlasmicElementProxy;

export type PlasmicPrivacyPolicies__VariantMembers = {};
export type PlasmicPrivacyPolicies__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrivacyPolicies__VariantsArgs;
export const PlasmicPrivacyPolicies__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPrivacyPolicies__ArgsType = {};
type ArgPropType = keyof PlasmicPrivacyPolicies__ArgsType;
export const PlasmicPrivacyPolicies__ArgProps = new Array<ArgPropType>();

export type PlasmicPrivacyPolicies__OverridesType = {
  root?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  text?: Flex__<"div">;
};

export interface DefaultPrivacyPoliciesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPrivacyPolicies__RenderFunc(props: {
  variants: PlasmicPrivacyPolicies__VariantsArgs;
  args: PlasmicPrivacyPolicies__ArgsType;
  overrides: PlasmicPrivacyPolicies__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPrivacyPolicies.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPrivacyPolicies.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPrivacyPolicies.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Privacy Policies"}
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "Effective Date: July 2, 2025\n\nThis Privacy Policy explains how we collect, use, and protect your information when you use our WhatsApp Reminder Service (\u201cService\u201d). By using the Service, you agree to the terms outlined below.\n\n1.\tInformation We Collect\n\nWhen you interact with our service, we may collect the following: your WhatsApp number required to send and receive messages; the reminder content, which is the message you send us as a reminder; the reminder time and date when you want to be reminded; technical logs including delivery status, message timestamps, and system activity logs. We only collect the minimum information necessary to make the reminder service work.\n\n2.\tHow We Use Your Information\n\nWe use your information to deliver the reminders you set at the scheduled time; improve the reliability and performance of our service; and provide support or notify you in case of any issues. We do not use your data for advertising or share it with third-party marketers.\n\n3.\tData Retention\n\nReminder messages are deleted within 7 days after being sent. Usage logs may be stored for a short period to monitor system health and troubleshoot issues. You can stop using the service anytime and request that your data be permanently deleted.\n\n4.\tData Security\n\nWe implement industry-standard security practices to protect your data from unauthorized access, misuse, or loss. Access to your data is strictly limited and encrypted during transmission.\n\n5.\tSharing of Data\n\nWe do not sell, rent, or share your personal data with anyone outside our company, except if required by law or legal process, or to trusted technology providers who help us deliver the service (such as cloud hosting or WhatsApp API providers) and only under strict confidentiality agreements.\n\n6.\tYour Rights\n\nDepending on your location, you may have the right to request access to your data, correct or delete your personal information, or withdraw your consent at any time. To make any such request, contact us at \u00a0"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"ping@oneping.in"}
                </span>
                <React.Fragment>
                  {
                    "\n\n7.\tChanges to This Policy\n\nWe may update this Privacy Policy from time to time. When we do, we will revise the \u201cEffective Date\u201d above. Continued use of our service after updates means you accept the revised policy.\n\n8.\tContact Us\n\nIf you have questions about this Privacy Policy or how we handle your data, contact us at \u00a0"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"ping@oneping.in"}
                </span>
              </React.Fragment>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "footer", "section", "h1", "text"],
  footer: ["footer"],
  section: ["section", "h1", "text"],
  h1: ["h1"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  footer: typeof Footer;
  section: "section";
  h1: "h1";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrivacyPolicies__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrivacyPolicies__VariantsArgs;
    args?: PlasmicPrivacyPolicies__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrivacyPolicies__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrivacyPolicies__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPrivacyPolicies__ArgProps,
          internalVariantPropNames: PlasmicPrivacyPolicies__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPrivacyPolicies__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrivacyPolicies";
  } else {
    func.displayName = `PlasmicPrivacyPolicies.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hZLAfRDEeUGg5dcwpxosDh"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPrivacyPolicies = Object.assign(
  // Top-level PlasmicPrivacyPolicies renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    footer: makeNodeComponent("footer"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPrivacyPolicies
    internalVariantProps: PlasmicPrivacyPolicies__VariantProps,
    internalArgProps: PlasmicPrivacyPolicies__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Contact us",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPrivacyPolicies;
/* prettier-ignore-end */
